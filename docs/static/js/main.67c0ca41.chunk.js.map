{"version":3,"sources":["services/transformWeather.js","constants/weathers.js","services/transformForecast.js","actions/index.js","constants/apiUrl.js","reducers/cities.js","reducers/index.js","reducers/city.js","components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","components/WeatherLocation/WeatherData/index.js","components/WeatherLocation/index.js","components/LocationList.js","containers/LocationListContainer.js","components/ForecastItem/index.js","components/ForecastExtended.js","containers/ForecastExtendedContainer.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["transformWeather","weather_data","kelvin","_weather_data$main","main","humidity","temp","speed","wind","weatherState","weather","id","getWeatherState","temperature","Number","convert","from","to","toFixed","concat","transformForecast","data","list","filter","item","moment","unix","dt","hour","map","weekDay","format","SET_CITY","SET_FORECAST_DATA","SET_WEATHER_CITY","GET_WEATHER_CITY","setSelectedCity","payload","dispatch","getState","type","setCity","state","date","cities","forecastDataDate","dateNow","Date","axios","get","then","response","forecast","forecastData","setForecastData","city","setWeather","forEach","getForecastDataFromCities","createSelector","getWeatherCities","fromObjToArray","toPairs","_ref","_ref2","Object","slicedToArray","key","name","combineReducers","arguments","length","undefined","action","_action$payload","objectSpread","defineProperty","_action$payload2","getCity","_getForecastDataFromCities","_getWeatherCities","Location","current","react_default","a","createElement","className","WeatherExtraInfo","icons","_icons","WeatherTemperature","icon","react_weathericons_lib_default","size","getWeatherIcon","WeatherData","_ref$data","WeatherData_WeatherTemperature","WeatherData_WeatherExtraInfo","WeatherLocation","onWeatherLocationClick","onClick","WeatherLocation_Location","WeatherLocation_WeatherData","CircularProgress_default","LocationList","onSelectedLocation","components_WeatherLocation","handleWeatherLocationClick","initComponents","LocationListContainer","handleSelectionLocation","_this","props","_this$props","this","components_LocationList","citiesWeather","Component","connect","bindActionCreators","actions","formatDay","value","ForestItem","ForecastExtended","ForecastItem","renderForecastItemDays","ForecastExtendedContainer","components_ForecastExtended","App","lib","AppBar_default","position","Toolbar_default","Typography_default","variant","color","xs","md","containers_LocationListContainer","Paper_default","zdepth","containers_ForecastExtendedContainer","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.67c0ca41.chunk.js","sourcesContent":["import convert from \"convert-units\";\nimport { SNOW, CLOUD, RAIN, SUN, THUNDER, DRIZZLE } from \"../constants/weathers\";\n\nconst getTemperature = kelvin => {\n    return Number(convert(kelvin).from(\"K\").to(\"C\").toFixed(0));\n}\n\nconst getWeatherState = weather => {\n  const { id } = weather;\n  if(id < 300) return THUNDER;\n  else if(id < 400) return DRIZZLE;\n  else if(id < 600) return RAIN;\n  else if(id < 700) return SNOW;\n  else if(id === 800) return SUN;\n  else return CLOUD;\n};\n\nconst transformWeather = weather_data => {\n  const { humidity, temp } = weather_data.main;\n  const { speed } = weather_data.wind;\n  const weatherState = getWeatherState(weather_data.weather[0]);\n  const temperature = getTemperature(temp);\n\n  const data = {\n    humidity,\n    temperature,\n    weatherState,\n    wind: `${speed} m/s`\n  };\n  return data;\n};\n\nexport default transformWeather;","export const CLOUD = \"cloud\";\nexport const SUN = \"sun\";\nexport const RAIN = \"rain\";\nexport const SNOW = \"snow\";\nexport const THUNDER = \"thunder\";\nexport const DRIZZLE = \"drizzle\";","import moment from \"moment\";\nimport \"moment/locale/es\";\nimport transformWeather from \"./transformWeather\";\n\nconst transformForecast = data =>\n  data.list\n    .filter(\n      item => moment.unix(item.dt).hour() === 12\n    )\n    .map(item => ({\n      weekDay: moment.unix(item.dt).format(\"ddd\"),\n      hour: moment.unix(item.dt).hour(),\n      data: transformWeather(item)\n    }));\n\nexport default transformForecast;\n","import axios from 'axios';\nimport { BACKEND_FORECAST, BACKEND_WEATHER } from \"../constants/apiUrl\";\nimport transformForecast from \"./../services/transformForecast\";\nimport transformWeather from \"./../services/transformWeather\";\n\nexport const SET_CITY = \"SET_CITY\";\nexport const SET_FORECAST_DATA = \"SET_FORECAST_DATA\";\n\nexport const SET_WEATHER_CITY = \"SET_WEATHER_CITY\";\nexport const GET_WEATHER_CITY = \"GET_WEATHER_CITY\";\n\nconst setCity = payload => ({ type: SET_CITY, payload });\nconst setForecastData = payload => ({ type: SET_FORECAST_DATA, payload });\n\nconst getWeatherCity = payload => ({ type: GET_WEATHER_CITY, payload });\nconst setWeatherCity = payload => ({ type: SET_WEATHER_CITY, payload })\n\nexport const setSelectedCity = payload => {\n  return (dispatch, getState) => {\n    \n    dispatch(setCity(payload));\n    const state = getState();\n    const date = state.cities[payload] && state.cities[payload].forecastDataDate;\n    const dateNow = new Date();\n    if(date && (dateNow - date) < 1*60*1000) return;\n    return axios.get(BACKEND_FORECAST+payload)\n      .then(response => response.data.forecast)\n      .then(weather_data => {\n        const forecastData = transformForecast(weather_data);\n        dispatch(setForecastData({ city: payload, forecastData }));\n      });\n  };\n};\n\nexport const setWeather = payload => {\n  \n  return dispatch => {\n    payload.forEach(city => {\n      dispatch(getWeatherCity(city));\n      return axios.get(BACKEND_WEATHER+city)\n      .then(response => {\n        return response.data.weather;\n      })\n      .then(weather_data => {\n        const weather = transformWeather(weather_data);\n        dispatch(setWeatherCity({city,weather}));\n      });\n    });\n  }\n}\n","export const BACKEND_WEATHER = \"https://martinbobbio-weather.herokuapp.com/v1/current/\";\nexport const BACKEND_FORECAST = \"https://martinbobbio-weather.herokuapp.com/v1/forecast/\";\nexport const BACKEND_LOCATION = \"https://martinbobbio-weather.herokuapp.com/v1/location/\";","import { createSelector } from 'reselect';\nimport toPairs from 'lodash.topairs';\nimport { SET_FORECAST_DATA, GET_WEATHER_CITY, SET_WEATHER_CITY } from \"../actions\";\n\nexport const cities = (state = {}, action) => {\n  switch (action.type) {\n    case SET_FORECAST_DATA: {\n      const { city, forecastData } = action.payload;\n      return { ...state, [city]: { ...state[city], forecastData, forecastDataDate: new Date() } };\n    }\n    case GET_WEATHER_CITY: {\n      const city = action.payload;\n      return { ...state, [city]: { ...state[city], weather:null }}\n    }\n    case SET_WEATHER_CITY:{\n      const { city, weather } = action.payload;\n      return { ...state, [city]: { ...state[city], weather }}\n    }\n    default:\n      return state;\n  }\n};\n\n export const getForecastDataFromCities = createSelector((state, city) => state[city] && state[city].forecastData, forecastData => forecastData);\n\n export const getWeatherCities = createSelector(state => fromObjToArray(state), cities => cities);\n\n const fromObjToArray = cities => (toPairs(cities).map(([key, value]) => ({ key, name: key, data: value.weather})));","import { combineReducers } from 'redux';\nimport { createSelector } from 'reselect';\nimport { cities, getForecastDataFromCities as _getForecastDataFromCities, getWeatherCities as _getWeatherCities } from './cities';\nimport { city } from './city';\n\nexport default combineReducers({\n    cities,\n    city\n}); \n\nexport const getCity = createSelector(state => state.city, city => city);\n\nexport const getForecastDataFromCities = createSelector(state => state.cities, getCity,_getForecastDataFromCities);\n\nexport const getWeatherCities = createSelector(state => state.cities, _getWeatherCities);\n","import { SET_CITY } from \"./../actions\";\n\nexport const city = (state = {}, action) => {\n  switch (action.type) {\n    case SET_CITY:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport './styles.css';\n\nconst Location = ({ city, current }) => {\n  return (\n    <div className=\"location-container\">\n      <h1 className={current ? 'c-black' : ''}>{current && 'My city: '}{city}</h1>\n    </div>\n  );\n};\n\nLocation.propTypes = {\n    city: PropTypes.string.isRequired,\n}\n\nexport default Location;\n","import React from 'react';\nimport PropTypes from \"prop-types\";\nimport './styles.css';\n\nconst WeatherExtraInfo = ({humidity,wind}) => (\n    <div className=\"weather-extra-info-container \">\n        <span className=\"extra-info-text\">{`Humidity: ${humidity}%`}</span>\n        <span className=\"extra-info-text\">{`Wind: ${wind}`}</span>\n    </div>\n)\n\nWeatherExtraInfo.propTypes = {\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired,\n}\n\nexport default WeatherExtraInfo;\n","import React from \"react\";\nimport WeatherIcons from \"react-weathericons\";\nimport PropTypes from \"prop-types\";\nimport { CLOUD, SUN, RAIN, SNOW, THUNDER, DRIZZLE } from \"./../../../constants/weathers\";\nimport './styles.css';\n\nconst icons = {\n  [SUN]: \"day-sunny\",\n  [CLOUD]: \"cloud\",\n  [RAIN]: \"rain\",\n  [SNOW]: \"snow\",\n  [THUNDER]: \"day-thunderstorm\",\n  [DRIZZLE]: \"day-showers\",\n};\n\nconst getWeatherIcon = weatherState => {\n  const icon = icons[weatherState];\n  const sizeIcon = \"4x\";\n  if (icon) return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />;\n  else return <WeatherIcons className=\"wicon\" name={\"day-sunny\"} size={sizeIcon} />;\n};\n\nconst WeatherTemperature = ({ temperature, weatherState }) => (\n  <div className=\"weather-temperature-container\">\n    {getWeatherIcon(weatherState)}\n    <span className=\"temperature\">{`${temperature}`}</span>\n    <span className=\"temperature-type\"> C°</span>\n  </div>\n);\n\nWeatherTemperature.propTypes = {\n    temperature: PropTypes.number,\n    weatherState: PropTypes.string\n}\n\nexport default WeatherTemperature;\n","import React from \"react\";\nimport WeatherExtraInfo from \"./WeatherExtraInfo\";\nimport WeatherTemperature from \"./WeatherTemperature\";\nimport PropTypes from \"prop-types\";\nimport \"./styles.css\";\n\nconst WeatherData = ({\n  data: { temperature, weatherState, humidity, wind }\n}) => (\n  <div className=\"weather-data-container\">\n    <WeatherTemperature temperature={temperature} weatherState={weatherState} />\n    <WeatherExtraInfo humidity={humidity} wind={wind} />\n  </div>\n);\n\nWeatherData.propTypes = {\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.string.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.string.isRequired,\n    })\n}\n\nexport default WeatherData;\n","import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Location from \"./Location\";\nimport WeatherData from \"./WeatherData\";\nimport \"./styles.css\";\n\nconst WeatherLocation = ({ onWeatherLocationClick, city, data }) => (\n  <div className=\"weather-location-container\" onClick={onWeatherLocationClick}>\n    <Location city={city} />\n    {data ? <WeatherData data={data} /> : <CircularProgress />}\n  </div>\n);\n\nWeatherLocation.propTypes = {\n  city: PropTypes.string.isRequired,\n  onWeatherLocationClick: PropTypes.func,\n  data: PropTypes.shape({\n    temperature: PropTypes.number.isRequired,\n    weatherState: PropTypes.string.isRequired,\n    humidity: PropTypes.number.isRequired,\n    wind: PropTypes.string.isRequired\n  })\n};\n\nexport default WeatherLocation;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport WeatherLocation from \"./WeatherLocation\";\nimport \"./styles.css\";\n\nconst LocationList = ({ cities, onSelectedLocation }) => {\n  const handleWeatherLocationClick = city => {\n    onSelectedLocation(city);\n  };\n  const initComponents = cities =>\n    cities.map(city => (\n      <WeatherLocation\n        key={city.key}\n        city={city.name}\n        onWeatherLocationClick={() => handleWeatherLocationClick(city.name)}\n        data={city.data}\n      />\n    ));\n\n  return <div className=\"location-list\">{initComponents(cities)}</div>;\n};\n\nLocationList.propTypes = {\n  cities: PropTypes.array.isRequired,\n  onSelectedLocation: PropTypes.func\n};\n\nexport default LocationList;\n","import React, { Component } from \"react\";\nimport { bindActionCreators } from 'redux';\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport * as actions from \"./../actions\";\nimport { getWeatherCities, getCity } from \"./../reducers\";\nimport LocationList from \"./../components/LocationList\";\n\nclass LocationListContainer extends Component {\n  componentDidMount() {\n    const { setWeather, setSelectedCity, cities, city } = this.props;\n    setWeather(cities);\n    setSelectedCity(city);\n  }\n\n  handleSelectionLocation = city => {\n    this.props.setSelectedCity(city);\n  };\n\n  render() {\n    return (\n      <LocationList\n        cities={this.props.citiesWeather}\n        onSelectedLocation={this.handleSelectionLocation}\n      />\n    );\n  }\n}\n\nLocationListContainer.propTypes = {\n  setSelectedCity: PropTypes.func.isRequired,\n  setWeather: PropTypes.func.isRequired,\n  cities: PropTypes.array.isRequired,\n  citiesWeather: PropTypes.array,\n  getCurrentCity: PropTypes.array,\n  city: PropTypes.string.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\n\nconst mapStateToProps = state => ({\n  citiesWeather: getWeatherCities(state),\n  city: getCity(state)\n});\n\nexport default connect(mapStateToProps,mapDispatchToProps)(LocationListContainer);\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport WeatherData from \"./../WeatherLocation/WeatherData\";\n\nconst ForestItem = ({weekDay, hour, data}) => (\n    <div>\n        <h2>{formatDay(weekDay)} - {hour}hs</h2>\n        <WeatherData data={data}/>\n    </div>\n\n)\n\nconst formatDay = (value) => {\n    switch(value){\n        case \"dom.\": return \"Sunday\"\n        case \"lun.\": return \"Monday\"\n        case \"mar.\": return \"Tuesday\"\n        case \"mié.\": return \"Wednesday\"\n        case \"jue.\": return \"Thursday\"\n        case \"vie.\": return \"Friday\"\n        case \"sáb.\": return \"Saturday\"\n        default: return \"\"\n    }\n}\n\nForestItem.propTypes = {\n    weekDay: PropTypes.string.isRequired,\n    hour: PropTypes.number.isRequired,\n    data: PropTypes.shape({\n        temperature: PropTypes.number.isRequired,\n        weatherState: PropTypes.string.isRequired,\n        humidity: PropTypes.number.isRequired,\n        wind: PropTypes.string.isRequired,\n    })\n}\n\nexport default ForestItem;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport ForecastItem from \"./ForecastItem\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport \"./styles.css\";\n\nconst renderForecastItemDays = forecastData => {\n  return forecastData.map(forecast => (\n    <ForecastItem\n      key={`${forecast.weekDay}${forecast.hour}`}\n      weekDay={forecast.weekDay}\n      hour={forecast.hour}\n      data={forecast.data}\n    />\n  ));\n};\n\nconst renderProgress = () => <CircularProgress />;\n\nconst ForecastExtended = ({ city, forecastData }) => (\n  <div>\n    <h2 className=\"forecast-title\">Extended forecast for {city}</h2>\n    {forecastData\n      ? renderForecastItemDays(forecastData)\n      : renderProgress()}\n  </div>\n);\n\nForecastExtended.propTypes = {\n  city: PropTypes.string.isRequired,\n  forecastData: PropTypes.array,\n};\n\nexport default ForecastExtended;\n","import React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { connect } from \"react-redux\";\nimport ForecastExtended from \"./../components/ForecastExtended\";\nimport { getForecastDataFromCities, getCity } from './../reducers';\n\nclass ForecastExtendedContainer extends Component {\n\n    render(){\n        const { city,forecastData } = this.props;\n        return(\n            city && <ForecastExtended city={city} forecastData={forecastData}/>\n        )\n    }\n}\n\nForecastExtendedContainer.propTypes = {\n    city: PropTypes.string.isRequired,\n    forecastData: PropTypes.array\n}\n  \nconst mapStateToProps = state => ({city: getCity(state), forecastData: getForecastDataFromCities(state) })\nexport default connect(mapStateToProps,null)(ForecastExtendedContainer);","import React, { Component } from \"react\";\nimport { Grid, Col, Row } from \"react-flexbox-grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport LocationListContainer from \"./containers/LocationListContainer\";\nimport ForecastExtendedContainer from \"./containers/ForecastExtendedContainer\";\nimport \"./App.css\";\n\nconst cities = [\n  \"Buenos Aires,ar\",\n  \"Washington,us\",\n  \"Bogota,col\",\n  \"Melbourne,au\",\n  \"Madrid,es\",\n  \"Lima,pe\"\n];\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <Grid>\n        <Row>\n          <AppBar position=\"sticky\">\n            <Toolbar>\n              <Typography variant=\"title\" color=\"inherit\">\n                WeatherApp\n              </Typography>\n            </Toolbar>\n          </AppBar>\n        </Row>\n        <Row>\n          <Col xs={12} md={6}>\n            <LocationListContainer cities={cities}/>\n          </Col>\n          <Col xs={12} md={6}>\n            <Paper zdepth={4}>\n              <div className=\"details\">\n                <ForecastExtendedContainer/>\n              </div>\n            </Paper>\n          </Col>\n        </Row>\n      </Grid>\n    );\n  }\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, applyMiddleware, compose } from \"redux\";\nimport thunk from 'redux-thunk';\nimport reducers from './../reducers';\n\nconst initState = {\n    city: 'Buenos Aires,ar'\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport const store = createStore(reducers, initState, composeEnhancers(applyMiddleware(thunk)));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}