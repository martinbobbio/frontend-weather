{"version":3,"sources":["services/transformWeather.js","constants/weathers.js","services/transformForecast.js","actions/index.js","constants/apiUrl.js","reducers/cities.js","reducers/index.js","reducers/city.js","components/WeatherLocation/Location.js","components/WeatherLocation/WeatherData/WeatherExtraInfo.js","components/WeatherLocation/WeatherData/WeatherTemperature.js","components/WeatherLocation/WeatherData/index.js","components/WeatherLocation/index.js","components/LocationList.js","containers/LocationListContainer.js","components/ForecastItem/index.js","components/ForecastExtended.js","containers/ForecastExtendedContainer.js","App.js","serviceWorker.js","store/index.js","index.js"],"names":["transformWeather","weather_data","kelvin","_weather_data$main","main","humidity","temp","speed","wind","weatherState","weather","id","getWeatherState","temperature","Number","convert","from","to","toFixed","concat","transformForecast","data","list","filter","item","moment","unix","dt","hour","map","weekDay","format","SET_CITY","SET_FORECAST_DATA","SET_WEATHER_CITY","GET_WEATHER_CITY","setSelectedCity","payload","dispatch","getState","type","setCity","state","date","cities","forecastDataDate","dateNow","Date","axios","get","then","response","forecast","forecastData","setForecastData","city","setWeather","_response$data$locati","location","regionName","countryCode","toLowerCase","unshift","forEach","getForecastDataFromCities","createSelector","getWeatherCities","fromObjToArray","toPairs","_ref","_ref2","Object","slicedToArray","key","name","combineReducers","arguments","length","undefined","action","_action$payload","objectSpread","defineProperty","_action$payload2","getCity","_getForecastDataFromCities","_getWeatherCities","Location","react_default","a","createElement","className","WeatherExtraInfo","icons","_icons","WeatherTemperature","icon","react_weathericons_lib_default","size","getWeatherIcon","WeatherData","_ref$data","WeatherData_WeatherTemperature","WeatherData_WeatherExtraInfo","WeatherLocation","onWeatherLocationClick","onClick","WeatherLocation_Location","WeatherLocation_WeatherData","CircularProgress_default","LocationList","onSelectedLocation","components_WeatherLocation","handleWeatherLocationClick","initComponents","LocationListContainer","handleSelectionLocation","_this","props","_this$props","this","components_LocationList","citiesWeather","Component","connect","bindActionCreators","actions","formatDay","value","ForestItem","ForecastExtended","ForecastItem","renderForecastItemDays","ForecastExtendedContainer","components_ForecastExtended","App","lib","AppBar_default","position","Toolbar_default","Typography_default","variant","color","xs","md","containers_LocationListContainer","Paper_default","zdepth","containers_ForecastExtendedContainer","Boolean","window","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.434b916a.chunk.js","sourcesContent":["import convert from \"convert-units\";\r\nimport { SNOW, CLOUD, RAIN, SUN, THUNDER, DRIZZLE } from \"../constants/weathers\";\r\n\r\nconst getTemperature = kelvin => {\r\n    return Number(convert(kelvin).from(\"K\").to(\"C\").toFixed(0));\r\n}\r\n\r\nconst getWeatherState = weather => {\r\n  const { id } = weather;\r\n  if(id < 300) return THUNDER;\r\n  else if(id < 400) return DRIZZLE;\r\n  else if(id < 600) return RAIN;\r\n  else if(id < 700) return SNOW;\r\n  else if(id === 800) return SUN;\r\n  else return CLOUD;\r\n};\r\n\r\nconst transformWeather = weather_data => {\r\n  const { humidity, temp } = weather_data.main;\r\n  const { speed } = weather_data.wind;\r\n  const weatherState = getWeatherState(weather_data.weather[0]);\r\n  const temperature = getTemperature(temp);\r\n\r\n  const data = {\r\n    humidity,\r\n    temperature,\r\n    weatherState,\r\n    wind: `${speed} m/s`\r\n  };\r\n  return data;\r\n};\r\n\r\nexport default transformWeather;","export const CLOUD = \"cloud\";\r\nexport const SUN = \"sun\";\r\nexport const RAIN = \"rain\";\r\nexport const SNOW = \"snow\";\r\nexport const THUNDER = \"thunder\";\r\nexport const DRIZZLE = \"drizzle\";","import moment from \"moment\";\r\nimport \"moment/locale/es\";\r\nimport transformWeather from \"./transformWeather\";\r\n\r\nconst transformForecast = data =>\r\n  data.list\r\n    .filter(\r\n      item => moment.unix(item.dt).hour() === 12\r\n    )\r\n    .map(item => ({\r\n      weekDay: moment.unix(item.dt).format(\"ddd\"),\r\n      hour: moment.unix(item.dt).hour(),\r\n      data: transformWeather(item)\r\n    }));\r\n\r\nexport default transformForecast;\r\n","import axios from 'axios';\r\nimport { BACKEND_FORECAST, BACKEND_WEATHER, BACKEND_LOCATION } from \"../constants/apiUrl\";\r\nimport transformForecast from \"./../services/transformForecast\";\r\nimport transformWeather from \"./../services/transformWeather\";\r\n\r\nexport const SET_CITY = \"SET_CITY\";\r\nexport const SET_FORECAST_DATA = \"SET_FORECAST_DATA\";\r\n\r\nexport const SET_WEATHER_CITY = \"SET_WEATHER_CITY\";\r\nexport const GET_WEATHER_CITY = \"GET_WEATHER_CITY\";\r\n\r\nconst setCity = payload => ({ type: SET_CITY, payload });\r\nconst setForecastData = payload => ({ type: SET_FORECAST_DATA, payload });\r\n\r\nconst getWeatherCity = payload => ({ type: GET_WEATHER_CITY, payload });\r\nconst setWeatherCity = payload => ({ type: SET_WEATHER_CITY, payload })\r\n\r\nexport const setSelectedCity = payload => {\r\n  return (dispatch, getState) => {\r\n    \r\n    dispatch(setCity(payload));\r\n    const state = getState();\r\n    const date = state.cities[payload] && state.cities[payload].forecastDataDate;\r\n    const dateNow = new Date();\r\n    if(date && (dateNow - date) < 1*60*1000) return;\r\n    return axios.get(BACKEND_FORECAST+payload)\r\n      .then(response => response.data.forecast)\r\n      .then(weather_data => {\r\n        const forecastData = transformForecast(weather_data);\r\n        dispatch(setForecastData({ city: payload, forecastData }));\r\n      });\r\n  };\r\n};\r\n\r\nexport const setWeather = payload => {\r\n  \r\n  return dispatch => {\r\n    axios.get(BACKEND_LOCATION).then(response => {\r\n      const { regionName, countryCode } = response.data.location\r\n      const city = regionName+\",\"+countryCode.toLowerCase()\r\n      payload.unshift(city)\r\n      payload.forEach(city => {\r\n        dispatch(getWeatherCity(city));\r\n        return axios.get(BACKEND_WEATHER+city)\r\n        .then(response => {\r\n          return response.data.weather;\r\n        })\r\n        .then(weather_data => {\r\n          const weather = transformWeather(weather_data);\r\n          dispatch(setWeatherCity({city,weather}));\r\n        });\r\n      });\r\n    })\r\n    \r\n  }\r\n}\r\n","export const BACKEND_WEATHER = \"https://martinbobbio-weather.herokuapp.com/v1/current/\";\r\nexport const BACKEND_FORECAST = \"https://martinbobbio-weather.herokuapp.com/v1/forecast/\";\r\nexport const BACKEND_LOCATION = \"https://martinbobbio-weather.herokuapp.com/v1/location/\";","import { createSelector } from 'reselect';\r\nimport toPairs from 'lodash.topairs';\r\nimport { SET_FORECAST_DATA, GET_WEATHER_CITY, SET_WEATHER_CITY } from \"../actions\";\r\n\r\nexport const cities = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case SET_FORECAST_DATA: {\r\n      const { city, forecastData } = action.payload;\r\n      return { ...state, [city]: { ...state[city], forecastData, forecastDataDate: new Date() } };\r\n    }\r\n    case GET_WEATHER_CITY: {\r\n      const city = action.payload;\r\n      return { ...state, [city]: { ...state[city], weather:null }}\r\n    }\r\n    case SET_WEATHER_CITY:{\r\n      const { city, weather } = action.payload;\r\n      return { ...state, [city]: { ...state[city], weather }}\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n export const getForecastDataFromCities = createSelector((state, city) => state[city] && state[city].forecastData, forecastData => forecastData);\r\n\r\n export const getWeatherCities = createSelector(state => fromObjToArray(state), cities => cities);\r\n\r\n const fromObjToArray = cities => (toPairs(cities).map(([key, value]) => ({ key, name: key, data: value.weather})));","import { combineReducers } from 'redux';\r\nimport { createSelector } from 'reselect';\r\nimport { cities, getForecastDataFromCities as _getForecastDataFromCities, getWeatherCities as _getWeatherCities } from './cities';\r\nimport { city } from './city';\r\n\r\nexport default combineReducers({\r\n    cities,\r\n    city\r\n}); \r\n\r\nexport const getCity = createSelector(state => state.city, city => city);\r\n\r\nexport const getForecastDataFromCities = createSelector(state => state.cities, getCity,_getForecastDataFromCities);\r\n\r\nexport const getWeatherCities = createSelector(state => state.cities, _getWeatherCities);\r\n","import { SET_CITY } from \"./../actions\";\r\n\r\nexport const city = (state = {}, action) => {\r\n  switch (action.type) {\r\n    case SET_CITY:\r\n      return action.payload;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport './styles.css';\r\n\r\nconst Location = ({ city }) => {\r\n\r\n  return (\r\n    <div className=\"location-container\">\r\n      <h1>{city}</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nLocation.propTypes = {\r\n    city: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default Location;\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport './styles.css';\r\n\r\nconst WeatherExtraInfo = ({humidity,wind}) => (\r\n    <div className=\"weather-extra-info-container \">\r\n        <span className=\"extra-info-text\">{`Humidity: ${humidity}%`}</span>\r\n        <span className=\"extra-info-text\">{`Wind: ${wind}`}</span>\r\n    </div>\r\n)\r\n\r\nWeatherExtraInfo.propTypes = {\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired,\r\n}\r\n\r\nexport default WeatherExtraInfo;\r\n","import React from \"react\";\r\nimport WeatherIcons from \"react-weathericons\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CLOUD, SUN, RAIN, SNOW, THUNDER, DRIZZLE } from \"./../../../constants/weathers\";\r\nimport './styles.css';\r\n\r\nconst icons = {\r\n  [SUN]: \"day-sunny\",\r\n  [CLOUD]: \"cloud\",\r\n  [RAIN]: \"rain\",\r\n  [SNOW]: \"snow\",\r\n  [THUNDER]: \"day-thunderstorm\",\r\n  [DRIZZLE]: \"day-showers\",\r\n};\r\n\r\nconst getWeatherIcon = weatherState => {\r\n  const icon = icons[weatherState];\r\n  const sizeIcon = \"4x\";\r\n  if (icon) return <WeatherIcons className=\"wicon\" name={icon} size={sizeIcon} />;\r\n  else return <WeatherIcons className=\"wicon\" name={\"day-sunny\"} size={sizeIcon} />;\r\n};\r\n\r\nconst WeatherTemperature = ({ temperature, weatherState }) => (\r\n  <div className=\"weather-temperature-container\">\r\n    {getWeatherIcon(weatherState)}\r\n    <span className=\"temperature\">{`${temperature}`}</span>\r\n    <span className=\"temperature-type\"> C°</span>\r\n  </div>\r\n);\r\n\r\nWeatherTemperature.propTypes = {\r\n    temperature: PropTypes.number,\r\n    weatherState: PropTypes.string\r\n}\r\n\r\nexport default WeatherTemperature;\r\n","import React from \"react\";\r\nimport WeatherExtraInfo from \"./WeatherExtraInfo\";\r\nimport WeatherTemperature from \"./WeatherTemperature\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./styles.css\";\r\n\r\nconst WeatherData = ({\r\n  data: { temperature, weatherState, humidity, wind }\r\n}) => (\r\n  <div className=\"weather-data-container\">\r\n    <WeatherTemperature temperature={temperature} weatherState={weatherState} />\r\n    <WeatherExtraInfo humidity={humidity} wind={wind} />\r\n  </div>\r\n);\r\n\r\nWeatherData.propTypes = {\r\n    data: PropTypes.shape({\r\n        temperature: PropTypes.number.isRequired,\r\n        weatherState: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        wind: PropTypes.string.isRequired,\r\n    })\r\n}\r\n\r\nexport default WeatherData;\r\n","import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Location from \"./Location\";\r\nimport WeatherData from \"./WeatherData\";\r\nimport \"./styles.css\";\r\n\r\nconst WeatherLocation = ({ onWeatherLocationClick, city, data }) => (\r\n  <div className=\"weather-location-container\" onClick={onWeatherLocationClick}>\r\n    <Location city={city} />\r\n    {data ? <WeatherData data={data} /> : <CircularProgress />}\r\n  </div>\r\n);\r\n\r\nWeatherLocation.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  onWeatherLocationClick: PropTypes.func,\r\n  data: PropTypes.shape({\r\n    temperature: PropTypes.number.isRequired,\r\n    weatherState: PropTypes.string.isRequired,\r\n    humidity: PropTypes.number.isRequired,\r\n    wind: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default WeatherLocation;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport WeatherLocation from \"./WeatherLocation\";\r\nimport \"./styles.css\";\r\n\r\nconst LocationList = ({ cities, onSelectedLocation }) => {\r\n  const handleWeatherLocationClick = city => {\r\n    onSelectedLocation(city);\r\n  };\r\n  const initComponents = cities =>\r\n    cities.map(city => (\r\n      <WeatherLocation\r\n        key={city.key}\r\n        city={city.name}\r\n        onWeatherLocationClick={() => handleWeatherLocationClick(city.name)}\r\n        data={city.data}\r\n      />\r\n    ));\r\n\r\n  return <div className=\"location-list\">{initComponents(cities)}</div>;\r\n};\r\n\r\nLocationList.propTypes = {\r\n  cities: PropTypes.array.isRequired,\r\n  onSelectedLocation: PropTypes.func\r\n};\r\n\r\nexport default LocationList;\r\n","import React, { Component } from \"react\";\r\nimport { bindActionCreators } from 'redux';\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport * as actions from \"./../actions\";\r\nimport { getWeatherCities, getCity } from \"./../reducers\";\r\nimport LocationList from \"./../components/LocationList\";\r\n\r\nclass LocationListContainer extends Component {\r\n  componentDidMount() {\r\n    const { setWeather, setSelectedCity, cities, city } = this.props;\r\n    setWeather(cities);\r\n    if(!city) setSelectedCity(\"Virginia,us\");\r\n    else setSelectedCity(city);\r\n  }\r\n\r\n  handleSelectionLocation = city => {\r\n    this.props.setSelectedCity(city);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <LocationList\r\n        cities={this.props.citiesWeather}\r\n        onSelectedLocation={this.handleSelectionLocation}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nLocationListContainer.propTypes = {\r\n  setSelectedCity: PropTypes.func.isRequired,\r\n  setWeather: PropTypes.func.isRequired,\r\n  cities: PropTypes.array.isRequired,\r\n  citiesWeather: PropTypes.array,\r\n  getCurrentCity: PropTypes.array,\r\n  city: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators(actions, dispatch);\r\n\r\nconst mapStateToProps = state => ({\r\n  citiesWeather: getWeatherCities(state),\r\n  city: getCity(state)\r\n});\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(LocationListContainer);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport WeatherData from \"./../WeatherLocation/WeatherData\";\r\n\r\nconst ForestItem = ({weekDay, data}) => (\r\n    <div>\r\n        <h2>{formatDay(weekDay)}</h2>\r\n        <WeatherData data={data}/>\r\n    </div>\r\n\r\n)\r\n\r\nconst formatDay = (value) => {\r\n    switch(value){\r\n        case \"dom.\": return \"Sunday\"\r\n        case \"lun.\": return \"Monday\"\r\n        case \"mar.\": return \"Tuesday\"\r\n        case \"mié.\": return \"Wednesday\"\r\n        case \"jue.\": return \"Thursday\"\r\n        case \"vie.\": return \"Friday\"\r\n        case \"sáb.\": return \"Saturday\"\r\n        default: return \"\"\r\n    }\r\n}\r\n\r\nForestItem.propTypes = {\r\n    weekDay: PropTypes.string.isRequired,\r\n    data: PropTypes.shape({\r\n        temperature: PropTypes.number.isRequired,\r\n        weatherState: PropTypes.string.isRequired,\r\n        humidity: PropTypes.number.isRequired,\r\n        wind: PropTypes.string.isRequired,\r\n    })\r\n}\r\n\r\nexport default ForestItem;","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport ForecastItem from \"./ForecastItem\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport \"./styles.css\";\r\n\r\nconst renderForecastItemDays = forecastData => {\r\n  return forecastData.map(forecast => (\r\n    <ForecastItem\r\n      key={`${forecast.weekDay}${forecast.hour}`}\r\n      weekDay={forecast.weekDay}\r\n      hour={forecast.hour}\r\n      data={forecast.data}\r\n    />\r\n  ));\r\n};\r\n\r\nconst renderProgress = () => <CircularProgress />;\r\n\r\nconst ForecastExtended = ({ city, forecastData }) => (\r\n  <div>\r\n    <h2 className=\"forecast-title\">Extended forecast for {city}</h2>\r\n    {forecastData\r\n      ? renderForecastItemDays(forecastData)\r\n      : renderProgress()}\r\n  </div>\r\n);\r\n\r\nForecastExtended.propTypes = {\r\n  city: PropTypes.string.isRequired,\r\n  forecastData: PropTypes.array,\r\n};\r\n\r\nexport default ForecastExtended;\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from \"react-redux\";\r\nimport ForecastExtended from \"./../components/ForecastExtended\";\r\nimport { getForecastDataFromCities, getCity } from './../reducers';\r\n\r\nclass ForecastExtendedContainer extends Component {\r\n\r\n    render(){\r\n        const { city,forecastData } = this.props;\r\n        return(\r\n            city && <ForecastExtended city={city} forecastData={forecastData}/>\r\n        )\r\n    }\r\n}\r\n\r\nForecastExtendedContainer.propTypes = {\r\n    city: PropTypes.string.isRequired,\r\n    forecastData: PropTypes.array\r\n}\r\n  \r\nconst mapStateToProps = state => ({city: getCity(state), forecastData: getForecastDataFromCities(state) })\r\nexport default connect(mapStateToProps,null)(ForecastExtendedContainer);","import React, { Component } from \"react\";\r\nimport { Grid, Col, Row } from \"react-flexbox-grid\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport LocationListContainer from \"./containers/LocationListContainer\";\r\nimport ForecastExtendedContainer from \"./containers/ForecastExtendedContainer\";\r\nimport \"./App.css\";\r\n\r\nconst cities = [\r\n  \"Buenos Aires,ar\",\r\n  \"Bogota,col\",\r\n  \"Melbourne,au\",\r\n  \"Madrid,es\",\r\n  \"Lima,pe\"\r\n];\r\n\r\n\r\nclass App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <Grid>\r\n        <Row>\r\n          <AppBar position=\"sticky\">\r\n            <Toolbar>\r\n              <Typography variant=\"title\" color=\"inherit\">\r\n                WeatherApp\r\n              </Typography>\r\n            </Toolbar>\r\n          </AppBar>\r\n        </Row>\r\n        <Row>\r\n          <Col xs={12} md={6}>\r\n            <LocationListContainer cities={cities}/>\r\n          </Col>\r\n          <Col xs={12} md={6}>\r\n            <Paper zdepth={4}>\r\n              <div className=\"details\">\r\n                <ForecastExtendedContainer/>\r\n              </div>\r\n            </Paper>\r\n          </Col>\r\n        </Row>\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport reducers from './../reducers';\r\n\r\nconst initState = {\r\n    city: ''\r\n};\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(reducers, initState, composeEnhancers(applyMiddleware(thunk)));\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { store } from './store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}